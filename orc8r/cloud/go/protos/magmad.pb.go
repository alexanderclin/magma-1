// Code generated by protoc-gen-go. DO NOT EDIT.
// source: orc8r/protos/magmad.proto

package protos // import "magma/orc8r/cloud/go/protos"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _struct "github.com/golang/protobuf/ptypes/struct"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// RequestedAction is an emergency/last resort operation request for an
// unresponsive or flaky access gateway. It's not meant to be used under normal
// operating conditions. Not all actions may be supported by every gateway
type CheckinResponse_RequestedAction int32

const (
	CheckinResponse_NONE             CheckinResponse_RequestedAction = 0
	CheckinResponse_RESTART_SERVICES CheckinResponse_RequestedAction = 1
	CheckinResponse_RESTART_SYSTEM   CheckinResponse_RequestedAction = 2
)

var CheckinResponse_RequestedAction_name = map[int32]string{
	0: "NONE",
	1: "RESTART_SERVICES",
	2: "RESTART_SYSTEM",
}
var CheckinResponse_RequestedAction_value = map[string]int32{
	"NONE":             0,
	"RESTART_SERVICES": 1,
	"RESTART_SYSTEM":   2,
}

func (x CheckinResponse_RequestedAction) String() string {
	return proto.EnumName(CheckinResponse_RequestedAction_name, int32(x))
}
func (CheckinResponse_RequestedAction) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{14, 0}
}

type PingParams struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets           int32    `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingParams) Reset()         { *m = PingParams{} }
func (m *PingParams) String() string { return proto.CompactTextString(m) }
func (*PingParams) ProtoMessage()    {}
func (*PingParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{0}
}
func (m *PingParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingParams.Unmarshal(m, b)
}
func (m *PingParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingParams.Marshal(b, m, deterministic)
}
func (dst *PingParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingParams.Merge(dst, src)
}
func (m *PingParams) XXX_Size() int {
	return xxx_messageInfo_PingParams.Size(m)
}
func (m *PingParams) XXX_DiscardUnknown() {
	xxx_messageInfo_PingParams.DiscardUnknown(m)
}

var xxx_messageInfo_PingParams proto.InternalMessageInfo

func (m *PingParams) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *PingParams) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

type TracerouteParams struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	MaxHops              int32    `protobuf:"varint,2,opt,name=max_hops,json=maxHops,proto3" json:"max_hops,omitempty"`
	BytesPerPacket       int32    `protobuf:"varint,3,opt,name=bytes_per_packet,json=bytesPerPacket,proto3" json:"bytes_per_packet,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteParams) Reset()         { *m = TracerouteParams{} }
func (m *TracerouteParams) String() string { return proto.CompactTextString(m) }
func (*TracerouteParams) ProtoMessage()    {}
func (*TracerouteParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{1}
}
func (m *TracerouteParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteParams.Unmarshal(m, b)
}
func (m *TracerouteParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteParams.Marshal(b, m, deterministic)
}
func (dst *TracerouteParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteParams.Merge(dst, src)
}
func (m *TracerouteParams) XXX_Size() int {
	return xxx_messageInfo_TracerouteParams.Size(m)
}
func (m *TracerouteParams) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteParams.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteParams proto.InternalMessageInfo

func (m *TracerouteParams) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *TracerouteParams) GetMaxHops() int32 {
	if m != nil {
		return m.MaxHops
	}
	return 0
}

func (m *TracerouteParams) GetBytesPerPacket() int32 {
	if m != nil {
		return m.BytesPerPacket
	}
	return 0
}

type NetworkTestRequest struct {
	Pings                []*PingParams       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes          []*TracerouteParams `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NetworkTestRequest) Reset()         { *m = NetworkTestRequest{} }
func (m *NetworkTestRequest) String() string { return proto.CompactTextString(m) }
func (*NetworkTestRequest) ProtoMessage()    {}
func (*NetworkTestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{2}
}
func (m *NetworkTestRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkTestRequest.Unmarshal(m, b)
}
func (m *NetworkTestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkTestRequest.Marshal(b, m, deterministic)
}
func (dst *NetworkTestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTestRequest.Merge(dst, src)
}
func (m *NetworkTestRequest) XXX_Size() int {
	return xxx_messageInfo_NetworkTestRequest.Size(m)
}
func (m *NetworkTestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTestRequest proto.InternalMessageInfo

func (m *NetworkTestRequest) GetPings() []*PingParams {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *NetworkTestRequest) GetTraceroutes() []*TracerouteParams {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type PingResult struct {
	HostOrIp             string   `protobuf:"bytes,1,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	NumPackets           int32    `protobuf:"varint,2,opt,name=num_packets,json=numPackets,proto3" json:"num_packets,omitempty"`
	Error                string   `protobuf:"bytes,3,opt,name=error,proto3" json:"error,omitempty"`
	PacketsTransmitted   int32    `protobuf:"varint,4,opt,name=packets_transmitted,json=packetsTransmitted,proto3" json:"packets_transmitted,omitempty"`
	PacketsReceived      int32    `protobuf:"varint,5,opt,name=packets_received,json=packetsReceived,proto3" json:"packets_received,omitempty"`
	AvgResponseMs        float32  `protobuf:"fixed32,6,opt,name=avg_response_ms,json=avgResponseMs,proto3" json:"avg_response_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PingResult) Reset()         { *m = PingResult{} }
func (m *PingResult) String() string { return proto.CompactTextString(m) }
func (*PingResult) ProtoMessage()    {}
func (*PingResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{3}
}
func (m *PingResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PingResult.Unmarshal(m, b)
}
func (m *PingResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PingResult.Marshal(b, m, deterministic)
}
func (dst *PingResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PingResult.Merge(dst, src)
}
func (m *PingResult) XXX_Size() int {
	return xxx_messageInfo_PingResult.Size(m)
}
func (m *PingResult) XXX_DiscardUnknown() {
	xxx_messageInfo_PingResult.DiscardUnknown(m)
}

var xxx_messageInfo_PingResult proto.InternalMessageInfo

func (m *PingResult) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *PingResult) GetNumPackets() int32 {
	if m != nil {
		return m.NumPackets
	}
	return 0
}

func (m *PingResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *PingResult) GetPacketsTransmitted() int32 {
	if m != nil {
		return m.PacketsTransmitted
	}
	return 0
}

func (m *PingResult) GetPacketsReceived() int32 {
	if m != nil {
		return m.PacketsReceived
	}
	return 0
}

func (m *PingResult) GetAvgResponseMs() float32 {
	if m != nil {
		return m.AvgResponseMs
	}
	return 0
}

type TracerouteProbe struct {
	Hostname             string   `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Ip                   string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	RttMs                float32  `protobuf:"fixed32,3,opt,name=rtt_ms,json=rttMs,proto3" json:"rtt_ms,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TracerouteProbe) Reset()         { *m = TracerouteProbe{} }
func (m *TracerouteProbe) String() string { return proto.CompactTextString(m) }
func (*TracerouteProbe) ProtoMessage()    {}
func (*TracerouteProbe) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{4}
}
func (m *TracerouteProbe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteProbe.Unmarshal(m, b)
}
func (m *TracerouteProbe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteProbe.Marshal(b, m, deterministic)
}
func (dst *TracerouteProbe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteProbe.Merge(dst, src)
}
func (m *TracerouteProbe) XXX_Size() int {
	return xxx_messageInfo_TracerouteProbe.Size(m)
}
func (m *TracerouteProbe) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteProbe.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteProbe proto.InternalMessageInfo

func (m *TracerouteProbe) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *TracerouteProbe) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *TracerouteProbe) GetRttMs() float32 {
	if m != nil {
		return m.RttMs
	}
	return 0
}

type TracerouteHop struct {
	Idx                  int32              `protobuf:"varint,1,opt,name=idx,proto3" json:"idx,omitempty"`
	Probes               []*TracerouteProbe `protobuf:"bytes,2,rep,name=probes,proto3" json:"probes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *TracerouteHop) Reset()         { *m = TracerouteHop{} }
func (m *TracerouteHop) String() string { return proto.CompactTextString(m) }
func (*TracerouteHop) ProtoMessage()    {}
func (*TracerouteHop) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{5}
}
func (m *TracerouteHop) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteHop.Unmarshal(m, b)
}
func (m *TracerouteHop) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteHop.Marshal(b, m, deterministic)
}
func (dst *TracerouteHop) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteHop.Merge(dst, src)
}
func (m *TracerouteHop) XXX_Size() int {
	return xxx_messageInfo_TracerouteHop.Size(m)
}
func (m *TracerouteHop) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteHop.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteHop proto.InternalMessageInfo

func (m *TracerouteHop) GetIdx() int32 {
	if m != nil {
		return m.Idx
	}
	return 0
}

func (m *TracerouteHop) GetProbes() []*TracerouteProbe {
	if m != nil {
		return m.Probes
	}
	return nil
}

type TracerouteResult struct {
	Error                string           `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	HostOrIp             string           `protobuf:"bytes,2,opt,name=host_or_ip,json=hostOrIp,proto3" json:"host_or_ip,omitempty"`
	Hops                 []*TracerouteHop `protobuf:"bytes,3,rep,name=hops,proto3" json:"hops,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TracerouteResult) Reset()         { *m = TracerouteResult{} }
func (m *TracerouteResult) String() string { return proto.CompactTextString(m) }
func (*TracerouteResult) ProtoMessage()    {}
func (*TracerouteResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{6}
}
func (m *TracerouteResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TracerouteResult.Unmarshal(m, b)
}
func (m *TracerouteResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TracerouteResult.Marshal(b, m, deterministic)
}
func (dst *TracerouteResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TracerouteResult.Merge(dst, src)
}
func (m *TracerouteResult) XXX_Size() int {
	return xxx_messageInfo_TracerouteResult.Size(m)
}
func (m *TracerouteResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TracerouteResult.DiscardUnknown(m)
}

var xxx_messageInfo_TracerouteResult proto.InternalMessageInfo

func (m *TracerouteResult) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *TracerouteResult) GetHostOrIp() string {
	if m != nil {
		return m.HostOrIp
	}
	return ""
}

func (m *TracerouteResult) GetHops() []*TracerouteHop {
	if m != nil {
		return m.Hops
	}
	return nil
}

type NetworkTestResponse struct {
	Pings                []*PingResult       `protobuf:"bytes,1,rep,name=pings,proto3" json:"pings,omitempty"`
	Traceroutes          []*TracerouteResult `protobuf:"bytes,2,rep,name=traceroutes,proto3" json:"traceroutes,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *NetworkTestResponse) Reset()         { *m = NetworkTestResponse{} }
func (m *NetworkTestResponse) String() string { return proto.CompactTextString(m) }
func (*NetworkTestResponse) ProtoMessage()    {}
func (*NetworkTestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{7}
}
func (m *NetworkTestResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NetworkTestResponse.Unmarshal(m, b)
}
func (m *NetworkTestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NetworkTestResponse.Marshal(b, m, deterministic)
}
func (dst *NetworkTestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NetworkTestResponse.Merge(dst, src)
}
func (m *NetworkTestResponse) XXX_Size() int {
	return xxx_messageInfo_NetworkTestResponse.Size(m)
}
func (m *NetworkTestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NetworkTestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NetworkTestResponse proto.InternalMessageInfo

func (m *NetworkTestResponse) GetPings() []*PingResult {
	if m != nil {
		return m.Pings
	}
	return nil
}

func (m *NetworkTestResponse) GetTraceroutes() []*TracerouteResult {
	if m != nil {
		return m.Traceroutes
	}
	return nil
}

type GetGatewayIdResponse struct {
	GatewayId            string   `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetGatewayIdResponse) Reset()         { *m = GetGatewayIdResponse{} }
func (m *GetGatewayIdResponse) String() string { return proto.CompactTextString(m) }
func (*GetGatewayIdResponse) ProtoMessage()    {}
func (*GetGatewayIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{8}
}
func (m *GetGatewayIdResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetGatewayIdResponse.Unmarshal(m, b)
}
func (m *GetGatewayIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetGatewayIdResponse.Marshal(b, m, deterministic)
}
func (dst *GetGatewayIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetGatewayIdResponse.Merge(dst, src)
}
func (m *GetGatewayIdResponse) XXX_Size() int {
	return xxx_messageInfo_GetGatewayIdResponse.Size(m)
}
func (m *GetGatewayIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetGatewayIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetGatewayIdResponse proto.InternalMessageInfo

func (m *GetGatewayIdResponse) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

type RestartServicesRequest struct {
	Services             []string `protobuf:"bytes,1,rep,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RestartServicesRequest) Reset()         { *m = RestartServicesRequest{} }
func (m *RestartServicesRequest) String() string { return proto.CompactTextString(m) }
func (*RestartServicesRequest) ProtoMessage()    {}
func (*RestartServicesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{9}
}
func (m *RestartServicesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RestartServicesRequest.Unmarshal(m, b)
}
func (m *RestartServicesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RestartServicesRequest.Marshal(b, m, deterministic)
}
func (dst *RestartServicesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RestartServicesRequest.Merge(dst, src)
}
func (m *RestartServicesRequest) XXX_Size() int {
	return xxx_messageInfo_RestartServicesRequest.Size(m)
}
func (m *RestartServicesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RestartServicesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RestartServicesRequest proto.InternalMessageInfo

func (m *RestartServicesRequest) GetServices() []string {
	if m != nil {
		return m.Services
	}
	return nil
}

type GenericCommandParams struct {
	Command              string          `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Params               *_struct.Struct `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericCommandParams) Reset()         { *m = GenericCommandParams{} }
func (m *GenericCommandParams) String() string { return proto.CompactTextString(m) }
func (*GenericCommandParams) ProtoMessage()    {}
func (*GenericCommandParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{10}
}
func (m *GenericCommandParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericCommandParams.Unmarshal(m, b)
}
func (m *GenericCommandParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericCommandParams.Marshal(b, m, deterministic)
}
func (dst *GenericCommandParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericCommandParams.Merge(dst, src)
}
func (m *GenericCommandParams) XXX_Size() int {
	return xxx_messageInfo_GenericCommandParams.Size(m)
}
func (m *GenericCommandParams) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericCommandParams.DiscardUnknown(m)
}

var xxx_messageInfo_GenericCommandParams proto.InternalMessageInfo

func (m *GenericCommandParams) GetCommand() string {
	if m != nil {
		return m.Command
	}
	return ""
}

func (m *GenericCommandParams) GetParams() *_struct.Struct {
	if m != nil {
		return m.Params
	}
	return nil
}

type GenericCommandResponse struct {
	Response             *_struct.Struct `protobuf:"bytes,1,opt,name=response,proto3" json:"response,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GenericCommandResponse) Reset()         { *m = GenericCommandResponse{} }
func (m *GenericCommandResponse) String() string { return proto.CompactTextString(m) }
func (*GenericCommandResponse) ProtoMessage()    {}
func (*GenericCommandResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{11}
}
func (m *GenericCommandResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenericCommandResponse.Unmarshal(m, b)
}
func (m *GenericCommandResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenericCommandResponse.Marshal(b, m, deterministic)
}
func (dst *GenericCommandResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenericCommandResponse.Merge(dst, src)
}
func (m *GenericCommandResponse) XXX_Size() int {
	return xxx_messageInfo_GenericCommandResponse.Size(m)
}
func (m *GenericCommandResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenericCommandResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenericCommandResponse proto.InternalMessageInfo

func (m *GenericCommandResponse) GetResponse() *_struct.Struct {
	if m != nil {
		return m.Response
	}
	return nil
}

type SystemStatus struct {
	Time                 uint64   `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	CpuUser              uint64   `protobuf:"varint,5,opt,name=cpu_user,json=cpuUser,proto3" json:"cpu_user,omitempty"`
	CpuSystem            uint64   `protobuf:"varint,6,opt,name=cpu_system,json=cpuSystem,proto3" json:"cpu_system,omitempty"`
	CpuIdle              uint64   `protobuf:"varint,7,opt,name=cpu_idle,json=cpuIdle,proto3" json:"cpu_idle,omitempty"`
	MemTotal             uint64   `protobuf:"varint,10,opt,name=mem_total,json=memTotal,proto3" json:"mem_total,omitempty"`
	MemAvailable         uint64   `protobuf:"varint,11,opt,name=mem_available,json=memAvailable,proto3" json:"mem_available,omitempty"`
	MemUsed              uint64   `protobuf:"varint,12,opt,name=mem_used,json=memUsed,proto3" json:"mem_used,omitempty"`
	MemFree              uint64   `protobuf:"varint,13,opt,name=mem_free,json=memFree,proto3" json:"mem_free,omitempty"`
	UptimeSecs           uint64   `protobuf:"varint,14,opt,name=uptime_secs,json=uptimeSecs,proto3" json:"uptime_secs,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SystemStatus) Reset()         { *m = SystemStatus{} }
func (m *SystemStatus) String() string { return proto.CompactTextString(m) }
func (*SystemStatus) ProtoMessage()    {}
func (*SystemStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{12}
}
func (m *SystemStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SystemStatus.Unmarshal(m, b)
}
func (m *SystemStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SystemStatus.Marshal(b, m, deterministic)
}
func (dst *SystemStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SystemStatus.Merge(dst, src)
}
func (m *SystemStatus) XXX_Size() int {
	return xxx_messageInfo_SystemStatus.Size(m)
}
func (m *SystemStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_SystemStatus.DiscardUnknown(m)
}

var xxx_messageInfo_SystemStatus proto.InternalMessageInfo

func (m *SystemStatus) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *SystemStatus) GetCpuUser() uint64 {
	if m != nil {
		return m.CpuUser
	}
	return 0
}

func (m *SystemStatus) GetCpuSystem() uint64 {
	if m != nil {
		return m.CpuSystem
	}
	return 0
}

func (m *SystemStatus) GetCpuIdle() uint64 {
	if m != nil {
		return m.CpuIdle
	}
	return 0
}

func (m *SystemStatus) GetMemTotal() uint64 {
	if m != nil {
		return m.MemTotal
	}
	return 0
}

func (m *SystemStatus) GetMemAvailable() uint64 {
	if m != nil {
		return m.MemAvailable
	}
	return 0
}

func (m *SystemStatus) GetMemUsed() uint64 {
	if m != nil {
		return m.MemUsed
	}
	return 0
}

func (m *SystemStatus) GetMemFree() uint64 {
	if m != nil {
		return m.MemFree
	}
	return 0
}

func (m *SystemStatus) GetUptimeSecs() uint64 {
	if m != nil {
		return m.UptimeSecs
	}
	return 0
}

// --------------------------------------------------------------------------
// Magma controller in the cloud
// --------------------------------------------------------------------------
type CheckinRequest struct {
	// Gateway's hardware id
	GatewayId string `protobuf:"bytes,1,opt,name=gateway_id,json=gatewayId,proto3" json:"gateway_id,omitempty"`
	// Magma python build version number. Ex: '0.0.0'
	MagmaPkgVersion string `protobuf:"bytes,2,opt,name=magma_pkg_version,json=magmaPkgVersion,proto3" json:"magma_pkg_version,omitempty"`
	// Gateway status
	Status *ServiceStatus `protobuf:"bytes,3,opt,name=status,proto3" json:"status,omitempty"`
	// System status
	SystemStatus *SystemStatus `protobuf:"bytes,4,opt,name=system_status,json=systemStatus,proto3" json:"system_status,omitempty"`
	// Gateway's IP on VPN
	VpnIp string `protobuf:"bytes,5,opt,name=vpn_ip,json=vpnIp,proto3" json:"vpn_ip,omitempty"`
	// Current running kernel version
	KernelVersion string `protobuf:"bytes,6,opt,name=kernel_version,json=kernelVersion,proto3" json:"kernel_version,omitempty"`
	// All kernel versions installed
	KernelVersionsInstalled []string `protobuf:"bytes,7,rep,name=kernel_versions_installed,json=kernelVersionsInstalled,proto3" json:"kernel_versions_installed,omitempty"`
	XXX_NoUnkeyedLiteral    struct{} `json:"-"`
	XXX_unrecognized        []byte   `json:"-"`
	XXX_sizecache           int32    `json:"-"`
}

func (m *CheckinRequest) Reset()         { *m = CheckinRequest{} }
func (m *CheckinRequest) String() string { return proto.CompactTextString(m) }
func (*CheckinRequest) ProtoMessage()    {}
func (*CheckinRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{13}
}
func (m *CheckinRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckinRequest.Unmarshal(m, b)
}
func (m *CheckinRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckinRequest.Marshal(b, m, deterministic)
}
func (dst *CheckinRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckinRequest.Merge(dst, src)
}
func (m *CheckinRequest) XXX_Size() int {
	return xxx_messageInfo_CheckinRequest.Size(m)
}
func (m *CheckinRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckinRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CheckinRequest proto.InternalMessageInfo

func (m *CheckinRequest) GetGatewayId() string {
	if m != nil {
		return m.GatewayId
	}
	return ""
}

func (m *CheckinRequest) GetMagmaPkgVersion() string {
	if m != nil {
		return m.MagmaPkgVersion
	}
	return ""
}

func (m *CheckinRequest) GetStatus() *ServiceStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CheckinRequest) GetSystemStatus() *SystemStatus {
	if m != nil {
		return m.SystemStatus
	}
	return nil
}

func (m *CheckinRequest) GetVpnIp() string {
	if m != nil {
		return m.VpnIp
	}
	return ""
}

func (m *CheckinRequest) GetKernelVersion() string {
	if m != nil {
		return m.KernelVersion
	}
	return ""
}

func (m *CheckinRequest) GetKernelVersionsInstalled() []string {
	if m != nil {
		return m.KernelVersionsInstalled
	}
	return nil
}

type CheckinResponse struct {
	Action               CheckinResponse_RequestedAction `protobuf:"varint,1,opt,name=action,proto3,enum=magma.orc8r.CheckinResponse_RequestedAction" json:"action,omitempty"`
	Time                 uint64                          `protobuf:"varint,2,opt,name=time,proto3" json:"time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *CheckinResponse) Reset()         { *m = CheckinResponse{} }
func (m *CheckinResponse) String() string { return proto.CompactTextString(m) }
func (*CheckinResponse) ProtoMessage()    {}
func (*CheckinResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{14}
}
func (m *CheckinResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CheckinResponse.Unmarshal(m, b)
}
func (m *CheckinResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CheckinResponse.Marshal(b, m, deterministic)
}
func (dst *CheckinResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CheckinResponse.Merge(dst, src)
}
func (m *CheckinResponse) XXX_Size() int {
	return xxx_messageInfo_CheckinResponse.Size(m)
}
func (m *CheckinResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CheckinResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CheckinResponse proto.InternalMessageInfo

func (m *CheckinResponse) GetAction() CheckinResponse_RequestedAction {
	if m != nil {
		return m.Action
	}
	return CheckinResponse_NONE
}

func (m *CheckinResponse) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

type GatewayStatus struct {
	// Unix time (the number of milliseconds elapsed since January 1, 1970 UTC) of
	// the last checkin
	Time uint64 `protobuf:"varint,1,opt,name=time,proto3" json:"time,omitempty"`
	// Last checkin info that was received from the gateway
	Checkin              *CheckinRequest `protobuf:"bytes,2,opt,name=checkin,proto3" json:"checkin,omitempty"`
	CertExpirationTime   int64           `protobuf:"varint,3,opt,name=cert_expiration_time,json=certExpirationTime,proto3" json:"cert_expiration_time,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *GatewayStatus) Reset()         { *m = GatewayStatus{} }
func (m *GatewayStatus) String() string { return proto.CompactTextString(m) }
func (*GatewayStatus) ProtoMessage()    {}
func (*GatewayStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{15}
}
func (m *GatewayStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayStatus.Unmarshal(m, b)
}
func (m *GatewayStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayStatus.Marshal(b, m, deterministic)
}
func (dst *GatewayStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatus.Merge(dst, src)
}
func (m *GatewayStatus) XXX_Size() int {
	return xxx_messageInfo_GatewayStatus.Size(m)
}
func (m *GatewayStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatus proto.InternalMessageInfo

func (m *GatewayStatus) GetTime() uint64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *GatewayStatus) GetCheckin() *CheckinRequest {
	if m != nil {
		return m.Checkin
	}
	return nil
}

func (m *GatewayStatus) GetCertExpirationTime() int64 {
	if m != nil {
		return m.CertExpirationTime
	}
	return 0
}

type GatewayStatusRequest struct {
	// Gateway's network id
	NetworkId string `protobuf:"bytes,1,opt,name=network_id,json=networkId,proto3" json:"network_id,omitempty"`
	// Gateway's logical id
	LogicalId            string   `protobuf:"bytes,2,opt,name=logical_id,json=logicalId,proto3" json:"logical_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GatewayStatusRequest) Reset()         { *m = GatewayStatusRequest{} }
func (m *GatewayStatusRequest) String() string { return proto.CompactTextString(m) }
func (*GatewayStatusRequest) ProtoMessage()    {}
func (*GatewayStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_magmad_ab8b7c3d885fbbe0, []int{16}
}
func (m *GatewayStatusRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GatewayStatusRequest.Unmarshal(m, b)
}
func (m *GatewayStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GatewayStatusRequest.Marshal(b, m, deterministic)
}
func (dst *GatewayStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GatewayStatusRequest.Merge(dst, src)
}
func (m *GatewayStatusRequest) XXX_Size() int {
	return xxx_messageInfo_GatewayStatusRequest.Size(m)
}
func (m *GatewayStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GatewayStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GatewayStatusRequest proto.InternalMessageInfo

func (m *GatewayStatusRequest) GetNetworkId() string {
	if m != nil {
		return m.NetworkId
	}
	return ""
}

func (m *GatewayStatusRequest) GetLogicalId() string {
	if m != nil {
		return m.LogicalId
	}
	return ""
}

func init() {
	proto.RegisterType((*PingParams)(nil), "magma.orc8r.PingParams")
	proto.RegisterType((*TracerouteParams)(nil), "magma.orc8r.TracerouteParams")
	proto.RegisterType((*NetworkTestRequest)(nil), "magma.orc8r.NetworkTestRequest")
	proto.RegisterType((*PingResult)(nil), "magma.orc8r.PingResult")
	proto.RegisterType((*TracerouteProbe)(nil), "magma.orc8r.TracerouteProbe")
	proto.RegisterType((*TracerouteHop)(nil), "magma.orc8r.TracerouteHop")
	proto.RegisterType((*TracerouteResult)(nil), "magma.orc8r.TracerouteResult")
	proto.RegisterType((*NetworkTestResponse)(nil), "magma.orc8r.NetworkTestResponse")
	proto.RegisterType((*GetGatewayIdResponse)(nil), "magma.orc8r.GetGatewayIdResponse")
	proto.RegisterType((*RestartServicesRequest)(nil), "magma.orc8r.RestartServicesRequest")
	proto.RegisterType((*GenericCommandParams)(nil), "magma.orc8r.GenericCommandParams")
	proto.RegisterType((*GenericCommandResponse)(nil), "magma.orc8r.GenericCommandResponse")
	proto.RegisterType((*SystemStatus)(nil), "magma.orc8r.SystemStatus")
	proto.RegisterType((*CheckinRequest)(nil), "magma.orc8r.CheckinRequest")
	proto.RegisterType((*CheckinResponse)(nil), "magma.orc8r.CheckinResponse")
	proto.RegisterType((*GatewayStatus)(nil), "magma.orc8r.GatewayStatus")
	proto.RegisterType((*GatewayStatusRequest)(nil), "magma.orc8r.GatewayStatusRequest")
	proto.RegisterEnum("magma.orc8r.CheckinResponse_RequestedAction", CheckinResponse_RequestedAction_name, CheckinResponse_RequestedAction_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MagmadClient is the client API for Magmad service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MagmadClient interface {
	// Starts all magma services
	StartServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Stops all magma services
	StopServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Reboot the gateway device
	Reboot(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error)
	// Restart specified magma services
	RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*Void, error)
	// Updates AG configs and restarts affected AG services
	SetConfigs(ctx context.Context, in *GatewayConfigs, opts ...grpc.CallOption) (*Void, error)
	// Get current AG configs
	GetConfigs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GatewayConfigs, error)
	// Execute some network commands to check gateway network health
	RunNetworkTests(ctx context.Context, in *NetworkTestRequest, opts ...grpc.CallOption) (*NetworkTestResponse, error)
	// Get gateway hardware ID
	GetGatewayId(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetGatewayIdResponse, error)
	// Execute generic command
	GenericCommand(ctx context.Context, in *GenericCommandParams, opts ...grpc.CallOption) (*GenericCommandResponse, error)
}

type magmadClient struct {
	cc *grpc.ClientConn
}

func NewMagmadClient(cc *grpc.ClientConn) MagmadClient {
	return &magmadClient{cc}
}

func (c *magmadClient) StartServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/StartServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) StopServices(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/StopServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) Reboot(ctx context.Context, in *Void, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/Reboot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) RestartServices(ctx context.Context, in *RestartServicesRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/RestartServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) SetConfigs(ctx context.Context, in *GatewayConfigs, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/SetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GetConfigs(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GatewayConfigs, error) {
	out := new(GatewayConfigs)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GetConfigs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) RunNetworkTests(ctx context.Context, in *NetworkTestRequest, opts ...grpc.CallOption) (*NetworkTestResponse, error) {
	out := new(NetworkTestResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/RunNetworkTests", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GetGatewayId(ctx context.Context, in *Void, opts ...grpc.CallOption) (*GetGatewayIdResponse, error) {
	out := new(GetGatewayIdResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GetGatewayId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magmadClient) GenericCommand(ctx context.Context, in *GenericCommandParams, opts ...grpc.CallOption) (*GenericCommandResponse, error) {
	out := new(GenericCommandResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Magmad/GenericCommand", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagmadServer is the server API for Magmad service.
type MagmadServer interface {
	// Starts all magma services
	StartServices(context.Context, *Void) (*Void, error)
	// Stops all magma services
	StopServices(context.Context, *Void) (*Void, error)
	// Reboot the gateway device
	Reboot(context.Context, *Void) (*Void, error)
	// Restart specified magma services
	RestartServices(context.Context, *RestartServicesRequest) (*Void, error)
	// Updates AG configs and restarts affected AG services
	SetConfigs(context.Context, *GatewayConfigs) (*Void, error)
	// Get current AG configs
	GetConfigs(context.Context, *Void) (*GatewayConfigs, error)
	// Execute some network commands to check gateway network health
	RunNetworkTests(context.Context, *NetworkTestRequest) (*NetworkTestResponse, error)
	// Get gateway hardware ID
	GetGatewayId(context.Context, *Void) (*GetGatewayIdResponse, error)
	// Execute generic command
	GenericCommand(context.Context, *GenericCommandParams) (*GenericCommandResponse, error)
}

func RegisterMagmadServer(s *grpc.Server, srv MagmadServer) {
	s.RegisterService(&_Magmad_serviceDesc, srv)
}

func _Magmad_StartServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).StartServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/StartServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).StartServices(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_StopServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).StopServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/StopServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).StopServices(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_Reboot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).Reboot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/Reboot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).Reboot(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_RestartServices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RestartServicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).RestartServices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/RestartServices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).RestartServices(ctx, req.(*RestartServicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_SetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayConfigs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).SetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/SetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).SetConfigs(ctx, req.(*GatewayConfigs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GetConfigs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GetConfigs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GetConfigs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GetConfigs(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_RunNetworkTests_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).RunNetworkTests(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/RunNetworkTests",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).RunNetworkTests(ctx, req.(*NetworkTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GetGatewayId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Void)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GetGatewayId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GetGatewayId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GetGatewayId(ctx, req.(*Void))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magmad_GenericCommand_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenericCommandParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagmadServer).GenericCommand(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Magmad/GenericCommand",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagmadServer).GenericCommand(ctx, req.(*GenericCommandParams))
	}
	return interceptor(ctx, in, info, handler)
}

var _Magmad_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Magmad",
	HandlerType: (*MagmadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartServices",
			Handler:    _Magmad_StartServices_Handler,
		},
		{
			MethodName: "StopServices",
			Handler:    _Magmad_StopServices_Handler,
		},
		{
			MethodName: "Reboot",
			Handler:    _Magmad_Reboot_Handler,
		},
		{
			MethodName: "RestartServices",
			Handler:    _Magmad_RestartServices_Handler,
		},
		{
			MethodName: "SetConfigs",
			Handler:    _Magmad_SetConfigs_Handler,
		},
		{
			MethodName: "GetConfigs",
			Handler:    _Magmad_GetConfigs_Handler,
		},
		{
			MethodName: "RunNetworkTests",
			Handler:    _Magmad_RunNetworkTests_Handler,
		},
		{
			MethodName: "GetGatewayId",
			Handler:    _Magmad_GetGatewayId_Handler,
		},
		{
			MethodName: "GenericCommand",
			Handler:    _Magmad_GenericCommand_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/magmad.proto",
}

// CheckindClient is the client API for Checkind service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CheckindClient interface {
	// Gateway periodic checkin - records given GW status to the GW's network table
	Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*CheckinResponse, error)
	// Gateway real time status retrieval from the GW's network table
	GetStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatus, error)
	// Removes GW status record from the GW's network table
	DeleteGatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*Void, error)
	// Deletes the network's status table (the table must be emptied prior to removal)
	DeleteNetwork(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*Void, error)
	// Returns a list of all logical gateway IDs for the given network which have
	// status stored in the service DB
	List(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*IDList, error)
}

type checkindClient struct {
	cc *grpc.ClientConn
}

func NewCheckindClient(cc *grpc.ClientConn) CheckindClient {
	return &checkindClient{cc}
}

func (c *checkindClient) Checkin(ctx context.Context, in *CheckinRequest, opts ...grpc.CallOption) (*CheckinResponse, error) {
	out := new(CheckinResponse)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/Checkin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) GetStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*GatewayStatus, error) {
	out := new(GatewayStatus)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) DeleteGatewayStatus(ctx context.Context, in *GatewayStatusRequest, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/DeleteGatewayStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) DeleteNetwork(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/DeleteNetwork", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *checkindClient) List(ctx context.Context, in *NetworkID, opts ...grpc.CallOption) (*IDList, error) {
	out := new(IDList)
	err := c.cc.Invoke(ctx, "/magma.orc8r.Checkind/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CheckindServer is the server API for Checkind service.
type CheckindServer interface {
	// Gateway periodic checkin - records given GW status to the GW's network table
	Checkin(context.Context, *CheckinRequest) (*CheckinResponse, error)
	// Gateway real time status retrieval from the GW's network table
	GetStatus(context.Context, *GatewayStatusRequest) (*GatewayStatus, error)
	// Removes GW status record from the GW's network table
	DeleteGatewayStatus(context.Context, *GatewayStatusRequest) (*Void, error)
	// Deletes the network's status table (the table must be emptied prior to removal)
	DeleteNetwork(context.Context, *NetworkID) (*Void, error)
	// Returns a list of all logical gateway IDs for the given network which have
	// status stored in the service DB
	List(context.Context, *NetworkID) (*IDList, error)
}

func RegisterCheckindServer(s *grpc.Server, srv CheckindServer) {
	s.RegisterService(&_Checkind_serviceDesc, srv)
}

func _Checkind_Checkin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).Checkin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/Checkin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).Checkin(ctx, req.(*CheckinRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).GetStatus(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_DeleteGatewayStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GatewayStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).DeleteGatewayStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/DeleteGatewayStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).DeleteGatewayStatus(ctx, req.(*GatewayStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_DeleteNetwork_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).DeleteNetwork(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/DeleteNetwork",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).DeleteNetwork(ctx, req.(*NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Checkind_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NetworkID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CheckindServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/magma.orc8r.Checkind/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CheckindServer).List(ctx, req.(*NetworkID))
	}
	return interceptor(ctx, in, info, handler)
}

var _Checkind_serviceDesc = grpc.ServiceDesc{
	ServiceName: "magma.orc8r.Checkind",
	HandlerType: (*CheckindServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Checkin",
			Handler:    _Checkind_Checkin_Handler,
		},
		{
			MethodName: "GetStatus",
			Handler:    _Checkind_GetStatus_Handler,
		},
		{
			MethodName: "DeleteGatewayStatus",
			Handler:    _Checkind_DeleteGatewayStatus_Handler,
		},
		{
			MethodName: "DeleteNetwork",
			Handler:    _Checkind_DeleteNetwork_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Checkind_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "orc8r/protos/magmad.proto",
}

func init() { proto.RegisterFile("orc8r/protos/magmad.proto", fileDescriptor_magmad_ab8b7c3d885fbbe0) }

var fileDescriptor_magmad_ab8b7c3d885fbbe0 = []byte{
	// 1358 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x57, 0xdd, 0x52, 0xdb, 0x46,
	0x14, 0xb6, 0x8d, 0x31, 0xf8, 0x80, 0x8d, 0xb3, 0x90, 0x44, 0x38, 0x30, 0x21, 0xca, 0xb4, 0x43,
	0x3b, 0xad, 0xc9, 0x40, 0xd2, 0x76, 0x3a, 0x9d, 0x74, 0x52, 0x20, 0xc4, 0x93, 0x90, 0x30, 0x6b,
	0x87, 0x4e, 0x73, 0xa3, 0x11, 0xd2, 0x89, 0xa3, 0xc1, 0xd2, 0xaa, 0xbb, 0x2b, 0x87, 0xdc, 0xb7,
	0x77, 0xbd, 0xe8, 0xb3, 0xf4, 0x2d, 0xfa, 0x1e, 0xed, 0x1b, 0xf4, 0x01, 0x3a, 0xfb, 0x23, 0x63,
	0x11, 0x43, 0xd3, 0xf6, 0xca, 0xda, 0x73, 0xbe, 0xef, 0xec, 0xf9, 0x97, 0x0c, 0xab, 0x8c, 0x07,
	0x5f, 0xf1, 0xad, 0x94, 0x33, 0xc9, 0xc4, 0x56, 0xec, 0x0f, 0x62, 0x3f, 0xec, 0xe8, 0x13, 0x59,
	0xd0, 0xa7, 0x8e, 0x06, 0xb4, 0x8b, 0xb8, 0x80, 0xc5, 0x31, 0x4b, 0x0c, 0xae, 0xdd, 0x2e, 0x9a,
	0x08, 0x58, 0xf2, 0x3a, 0x1a, 0x58, 0xdd, 0x7a, 0x41, 0x27, 0x90, 0x8f, 0xa2, 0x00, 0x77, 0xee,
	0xed, 0x58, 0xf5, 0xda, 0x80, 0xb1, 0xc1, 0x10, 0x8d, 0xfe, 0x24, 0x7b, 0xbd, 0x25, 0x24, 0xcf,
	0x02, 0x69, 0xb4, 0xee, 0x53, 0x80, 0xa3, 0x28, 0x19, 0x1c, 0xf9, 0xdc, 0x8f, 0x05, 0x59, 0x03,
	0x78, 0xc3, 0x84, 0xf4, 0x18, 0xf7, 0xa2, 0xd4, 0x29, 0x6f, 0x94, 0x37, 0xeb, 0x74, 0x5e, 0x49,
	0x5e, 0xf0, 0x6e, 0x4a, 0x6e, 0xc3, 0x42, 0x92, 0xc5, 0x5e, 0xea, 0x07, 0xa7, 0x28, 0x85, 0x53,
	0xd9, 0x28, 0x6f, 0xce, 0x52, 0x48, 0xb2, 0xf8, 0xc8, 0x48, 0xdc, 0x0c, 0x5a, 0x7d, 0xee, 0x07,
	0xc8, 0x59, 0x26, 0xf1, 0x83, 0x4c, 0xae, 0xc2, 0x7c, 0xec, 0x9f, 0x79, 0x6f, 0x58, 0x9a, 0xdb,
	0x9b, 0x8b, 0xfd, 0xb3, 0x27, 0x2c, 0x15, 0x64, 0x13, 0x5a, 0x27, 0xef, 0x24, 0x0a, 0x2f, 0x45,
	0x6e, 0xef, 0x74, 0x66, 0x34, 0xa4, 0xa9, 0xe5, 0x47, 0xc8, 0xcd, 0xbd, 0xee, 0x4f, 0x65, 0x20,
	0xcf, 0x51, 0xbe, 0x65, 0xfc, 0xb4, 0x8f, 0x42, 0x52, 0xfc, 0x31, 0x43, 0x21, 0xc9, 0xe7, 0x30,
	0x9b, 0x46, 0xc9, 0x40, 0x38, 0xe5, 0x8d, 0x99, 0xcd, 0x85, 0xed, 0x9b, 0x9d, 0x89, 0x5c, 0x77,
	0xce, 0x83, 0xa6, 0x06, 0x45, 0xbe, 0x85, 0x05, 0x39, 0x76, 0x5e, 0x79, 0xa3, 0x48, 0xeb, 0x05,
	0xd2, 0xc5, 0xe0, 0xe8, 0x24, 0xc3, 0xfd, 0xb3, 0x6c, 0x72, 0x49, 0x51, 0x64, 0x43, 0xf9, 0x3f,
	0x73, 0x49, 0x56, 0x60, 0x16, 0x39, 0x67, 0x5c, 0xc7, 0x5c, 0xa7, 0xe6, 0x40, 0xb6, 0x60, 0xd9,
	0x52, 0x3c, 0xc9, 0xfd, 0x44, 0xc4, 0x91, 0x94, 0x18, 0x3a, 0x55, 0x4d, 0x27, 0x56, 0xd5, 0x3f,
	0xd7, 0x90, 0x4f, 0xa0, 0x95, 0x13, 0x38, 0x06, 0x18, 0x8d, 0x30, 0x74, 0x66, 0x35, 0x7a, 0xc9,
	0xca, 0xa9, 0x15, 0x93, 0x8f, 0x61, 0xc9, 0x1f, 0x0d, 0x3c, 0x8e, 0x22, 0x65, 0x89, 0x40, 0x2f,
	0x16, 0x4e, 0x6d, 0xa3, 0xbc, 0x59, 0xa1, 0x0d, 0x7f, 0xa4, 0x82, 0xd2, 0xd2, 0x43, 0xe1, 0xf6,
	0x61, 0x69, 0x22, 0x11, 0x9c, 0x9d, 0x20, 0x69, 0x83, 0x8e, 0x2c, 0xf1, 0x63, 0x9c, 0x8c, 0x54,
	0x9d, 0x49, 0x13, 0x2a, 0x51, 0xaa, 0x03, 0xac, 0xd3, 0x4a, 0x94, 0x92, 0xeb, 0x50, 0xe3, 0x52,
	0x2a, 0xeb, 0x33, 0xda, 0xfa, 0x2c, 0x97, 0xf2, 0x50, 0xb8, 0xdf, 0x43, 0xe3, 0xdc, 0xea, 0x13,
	0x96, 0x92, 0x16, 0xcc, 0x44, 0xe1, 0x99, 0x36, 0x37, 0x4b, 0xd5, 0x23, 0xb9, 0x0f, 0xb5, 0x54,
	0x5d, 0x97, 0x17, 0x67, 0xed, 0xb2, 0xe2, 0x28, 0x10, 0xb5, 0x58, 0x77, 0x34, 0xd9, 0x94, 0xb6,
	0x36, 0xe3, 0xe4, 0x96, 0x27, 0x93, 0x5b, 0xac, 0x58, 0xe5, 0x42, 0xc5, 0x3a, 0x50, 0xd5, 0x6d,
	0x3a, 0xa3, 0xef, 0x6e, 0x5f, 0x72, 0xf7, 0x13, 0x96, 0x52, 0x8d, 0x73, 0x7f, 0x2e, 0xc3, 0x72,
	0xa1, 0x2b, 0x4d, 0x02, 0xff, 0xb9, 0x2d, 0x8d, 0x8f, 0xff, 0xa9, 0x2d, 0x2d, 0xb5, 0xd0, 0x96,
	0x0f, 0x60, 0xe5, 0x00, 0xe5, 0x81, 0x2f, 0xf1, 0xad, 0xff, 0xae, 0x1b, 0x8e, 0xfd, 0x58, 0x07,
	0x18, 0x18, 0xa1, 0x17, 0x85, 0x36, 0x11, 0xf5, 0x41, 0x0e, 0x73, 0xef, 0xc3, 0x0d, 0x8a, 0x42,
	0xfa, 0x5c, 0xf6, 0xcc, 0x46, 0x11, 0xf9, 0x5c, 0xb5, 0x61, 0xde, 0x2e, 0x19, 0x13, 0x43, 0x9d,
	0x8e, 0xcf, 0xae, 0xaf, 0x2e, 0x4b, 0x90, 0x47, 0xc1, 0x2e, 0x8b, 0x63, 0x3f, 0x09, 0xed, 0x16,
	0x70, 0x60, 0x2e, 0x30, 0x02, 0x7b, 0x53, 0x7e, 0x24, 0x5b, 0x50, 0x4b, 0x35, 0x46, 0x27, 0x5c,
	0xe5, 0xc3, 0xec, 0xab, 0x4e, 0xbe, 0xaf, 0x3a, 0x3d, 0xbd, 0xaf, 0xa8, 0x85, 0xb9, 0x87, 0x70,
	0xa3, 0x78, 0xc5, 0x38, 0xa2, 0x1d, 0x98, 0xcf, 0x9b, 0x57, 0xdf, 0x72, 0x85, 0xb1, 0x31, 0xd0,
	0xfd, 0xb5, 0x02, 0x8b, 0xbd, 0x77, 0x42, 0x62, 0xdc, 0x93, 0xbe, 0xcc, 0x04, 0x21, 0x50, 0x95,
	0x91, 0xed, 0xe3, 0x2a, 0xd5, 0xcf, 0x6a, 0x4d, 0x05, 0x69, 0xe6, 0x65, 0x02, 0xb9, 0x9e, 0x9e,
	0x2a, 0x9d, 0x0b, 0xd2, 0xec, 0xa5, 0x40, 0xae, 0xd2, 0xa8, 0x54, 0x42, 0x9b, 0xd0, 0x03, 0x53,
	0xa5, 0xf5, 0x20, 0xcd, 0x8c, 0xcd, 0x9c, 0x19, 0x85, 0x43, 0x74, 0xe6, 0xc6, 0xcc, 0x6e, 0x38,
	0x44, 0x72, 0x0b, 0xea, 0x31, 0xc6, 0x9e, 0x64, 0xd2, 0x1f, 0x3a, 0xa0, 0x75, 0xf3, 0x31, 0xc6,
	0x7d, 0x75, 0x26, 0x77, 0xa1, 0xa1, 0x94, 0xfe, 0xc8, 0x8f, 0x86, 0xfe, 0xc9, 0x10, 0x9d, 0x05,
	0x0d, 0x58, 0x8c, 0x31, 0x7e, 0x94, 0xcb, 0xf4, 0xf6, 0xc4, 0x58, 0xb9, 0x15, 0x3a, 0x8b, 0xc6,
	0x78, 0x8c, 0xf1, 0x4b, 0x81, 0x61, 0xae, 0x7a, 0xcd, 0x11, 0x9d, 0xc6, 0x58, 0xf5, 0x98, 0x23,
	0xaa, 0xd5, 0x93, 0xa5, 0x2a, 0x2c, 0x4f, 0x60, 0x20, 0x9c, 0xa6, 0xd6, 0x82, 0x11, 0xf5, 0x30,
	0x10, 0xee, 0xef, 0x15, 0x68, 0xee, 0xbe, 0xc1, 0xe0, 0x34, 0x4a, 0xf2, 0x9a, 0x5f, 0xdd, 0x2c,
	0xe4, 0x53, 0xb8, 0xa6, 0x1b, 0xd2, 0x4b, 0x4f, 0x07, 0xde, 0x08, 0xb9, 0x88, 0x58, 0x62, 0x07,
	0x68, 0x49, 0x2b, 0x8e, 0x4e, 0x07, 0xc7, 0x46, 0x4c, 0xb6, 0xa1, 0x26, 0x74, 0xa6, 0xf5, 0xfc,
	0x5f, 0x9c, 0x24, 0xdb, 0x6c, 0xa6, 0x16, 0xd4, 0x22, 0xc9, 0x43, 0x68, 0x98, 0x04, 0x7b, 0x96,
	0x5a, 0xd5, 0xd4, 0xd5, 0x22, 0x75, 0xa2, 0x8a, 0x74, 0x51, 0x4c, 0xd6, 0xf4, 0x3a, 0xd4, 0x46,
	0x69, 0xa2, 0xa6, 0x7a, 0xd6, 0x0c, 0xfc, 0x28, 0x4d, 0xba, 0x29, 0xf9, 0x08, 0x9a, 0xa7, 0xc8,
	0x13, 0x1c, 0x8e, 0x7d, 0xae, 0x69, 0x75, 0xc3, 0x48, 0x73, 0x8f, 0xbf, 0x86, 0xd5, 0x22, 0x4c,
	0x78, 0x51, 0x22, 0xa4, 0x3f, 0x1c, 0x62, 0xe8, 0xcc, 0xe9, 0x09, 0xb8, 0x59, 0x60, 0x88, 0x6e,
	0xae, 0x76, 0x7f, 0x2b, 0xc3, 0xd2, 0x38, 0x97, 0xb6, 0x4f, 0xf7, 0xa0, 0xe6, 0x07, 0x52, 0x5d,
	0xa7, 0x12, 0xd9, 0xdc, 0xfe, 0xac, 0x10, 0xc6, 0x05, 0x74, 0xc7, 0x96, 0x00, 0xc3, 0x47, 0x9a,
	0x43, 0x2d, 0x77, 0xdc, 0xa7, 0x95, 0xf3, 0x3e, 0x75, 0xf7, 0x61, 0xe9, 0x02, 0x9c, 0xcc, 0x43,
	0xf5, 0xf9, 0x8b, 0xe7, 0xfb, 0xad, 0x12, 0x59, 0x81, 0x16, 0xdd, 0xef, 0xf5, 0x1f, 0xd1, 0xbe,
	0xd7, 0xdb, 0xa7, 0xc7, 0xdd, 0xdd, 0xfd, 0x5e, 0xab, 0x4c, 0x08, 0x34, 0xc7, 0xd2, 0x1f, 0x7a,
	0xfd, 0xfd, 0xc3, 0x56, 0xc5, 0xfd, 0xa5, 0x0c, 0x0d, 0xbb, 0x30, 0xae, 0x18, 0x8a, 0x07, 0x30,
	0x17, 0x18, 0x5f, 0xed, 0xe8, 0xde, 0x9a, 0x1e, 0x87, 0xf6, 0x87, 0xe6, 0x58, 0x72, 0x0f, 0x56,
	0x02, 0xe4, 0xd2, 0xc3, 0xb3, 0x34, 0xe2, 0xbe, 0xf2, 0xd1, 0xd3, 0xa6, 0x55, 0x37, 0xcc, 0x50,
	0xa2, 0x74, 0xfb, 0x63, 0x55, 0x5f, 0x45, 0xd5, 0x87, 0x95, 0x82, 0x37, 0x13, 0x4d, 0x99, 0x98,
	0x05, 0x3b, 0xd1, 0x94, 0x56, 0xd2, 0x0d, 0x95, 0x7a, 0xc8, 0x06, 0x51, 0xe0, 0x0f, 0x95, 0xda,
	0x74, 0x63, 0xdd, 0x4a, 0xba, 0xe1, 0xf6, 0x5f, 0x55, 0xa8, 0x1d, 0xea, 0x6f, 0x31, 0xf2, 0x25,
	0x34, 0x7a, 0x93, 0x9b, 0x8e, 0x5c, 0x2b, 0x44, 0x72, 0xcc, 0xa2, 0xb0, 0xfd, 0xbe, 0xc8, 0x2d,
	0x91, 0x2f, 0x60, 0xb1, 0x27, 0x59, 0xfa, 0xaf, 0x79, 0xf7, 0xa0, 0x46, 0xf1, 0x84, 0x31, 0xf9,
	0xc1, 0x8c, 0xa7, 0xaa, 0xb2, 0x85, 0x75, 0x4c, 0xee, 0x16, 0x70, 0xd3, 0x97, 0xf5, 0x74, 0x63,
	0x0f, 0x01, 0x7a, 0x28, 0x77, 0xf5, 0x47, 0xa4, 0x20, 0xc5, 0xb2, 0xd9, 0x4c, 0x5b, 0xe5, 0xa5,
	0xfc, 0x83, 0x73, 0xfe, 0x94, 0x10, 0xae, 0x32, 0xe9, 0x96, 0xc8, 0x31, 0x2c, 0xd1, 0x2c, 0x99,
	0x78, 0x39, 0x0a, 0x72, 0xbb, 0xc0, 0x78, 0xff, 0x6b, 0xae, 0xbd, 0x71, 0x39, 0xc0, 0x6e, 0xf2,
	0x12, 0x79, 0x0c, 0x8b, 0x93, 0xaf, 0xba, 0x69, 0x9e, 0xdd, 0x29, 0x7a, 0x36, 0xe5, 0xc5, 0xe8,
	0x96, 0xc8, 0x2b, 0x68, 0x16, 0x5f, 0x31, 0xe4, 0x22, 0xed, 0xfd, 0x57, 0x5c, 0xfb, 0xee, 0x15,
	0x90, 0x73, 0xdb, 0xdb, 0x7f, 0x54, 0x60, 0xde, 0x8e, 0x46, 0x48, 0x1e, 0xc3, 0x9c, 0x7d, 0x26,
	0x57, 0x0d, 0x4f, 0x7b, 0xed, 0xaa, 0x0d, 0xe1, 0x96, 0xc8, 0x33, 0xa8, 0x1f, 0xa0, 0xb4, 0xb3,
	0x7a, 0x67, 0x5a, 0xf2, 0x0b, 0x93, 0xd3, 0x6e, 0x5f, 0x0e, 0x71, 0x4b, 0xe4, 0x10, 0x96, 0xf7,
	0x70, 0x88, 0x12, 0x8b, 0x3b, 0xe0, 0x03, 0xec, 0x4e, 0xed, 0x96, 0x6f, 0xa0, 0x61, 0xcc, 0xd9,
	0xa2, 0x91, 0x1b, 0xd3, 0x4a, 0xd9, 0xdd, 0x9b, 0xce, 0x7e, 0x00, 0xd5, 0x67, 0x91, 0x90, 0x97,
	0x92, 0x96, 0x0b, 0xf2, 0xee, 0x9e, 0x02, 0xbb, 0xa5, 0xef, 0xd6, 0x5f, 0xdd, 0xd2, 0xf2, 0x2d,
	0xf3, 0xe7, 0x28, 0x18, 0xb2, 0x2c, 0xdc, 0x1a, 0x30, 0xfb, 0x2f, 0xe9, 0xa4, 0xa6, 0x7f, 0x77,
	0xfe, 0x0e, 0x00, 0x00, 0xff, 0xff, 0x8d, 0xd9, 0xc5, 0x51, 0x9b, 0x0d, 0x00, 0x00,
}
